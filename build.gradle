plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    mockitoAgent {
        transitive = false
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // testcontainers
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.springframework.boot:spring-boot-testcontainers:3.4.4")

    // Springdoc-OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'
    implementation 'com.github.therapi:therapi-runtime-javadoc:0.15.0'

    // Mockito
    mockitoAgent 'org.mockito:mockito-core'
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs("-javaagent:${configurations.mockitoAgent.asPath}", "-Xshare:off")
}

openApi {
    outputDir.set(file("$projectDir/src/main/resources"))
    customBootRun {
        workingDir.set(projectDir)
    }
    requestHeaders = [
            "x-forwarded-host": "localhost",
            "x-forwarded-port": "8080"
    ]
}
